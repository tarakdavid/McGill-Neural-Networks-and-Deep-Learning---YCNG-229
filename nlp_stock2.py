# -*- coding: utf-8 -*-
"""nlp_stock2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1piBB2Tkap3Msn_O4htxBNKLF9_Dhkw4C
"""

!pip install SentencePiece

import nltk
nltk.download('vader_lexicon')

from bs4 import BeautifulSoup
import requests
from urllib.request import urlopen, Request
import matplotlib.pyplot as plt
import pandas as pd
import re
from nltk.sentiment.vader import SentimentIntensityAnalyzer

finvizurl = 'https://finviz.com/quote.ashx?t='

 
tickers = ['GME', 'AMC', 'TSLA']


news_tables = {}

for ticker in tickers:
  url = finvizurl + ticker
  req = Request(url=url, headers={'user-agent': 'my-app'})
  response = urlopen(req)

  html = BeautifulSoup(response, 'html')
  news_table = html.find(id='news-table')
  news_tables[ticker] = news_table

parsed_data = []
#iterating over key and value pairs for every single keyvalue in news table dictionary
for ticker, news_table in news_tables.items():
  for row in news_table.findAll('tr'):
    title = row.a.text #same as get_text()
    date_info = row.td.text.split(' ')
    if len(date_info) == 1:
      time = date_info[0]
    else:
      date = date_info[0]
      time = date_info[1]
    parsed_data.append([ticker, date, time, title])

print(parsed_data)

text = pd.DataFrame(parsed_data, columns=['ticker', 'date', 'time', 'title'])

text.head()

mean_text = text.groupby(['date'])

mean_text.head()

test = text.groupby(['date','ticker'])['title'].apply(' '.join).reset_index()

test.head(20)

test.iloc[0,2]

test['date'] = pd.to_datetime(test.date).dt.date

print(test)

mean_text['date'].unique()

test.head()

vader = SentimentIntensityAnalyzer()

func = lambda title: vader.polarity_scores(title)['compound']
test['compound'] = test['title'].apply(func)
#test['date'] = pd.to_datetime(text.date).dt.date

test.head(21)

test['date'].unique

vader.polarity_scores(test['title'].loc[0])

test2 = test

test2.head()

mean_text = test2.groupby(['ticker', 'date']).mean()
print(mean_text)

mean_text = mean_text.unstack()
mean_text = mean_text.xs('compound', axis="columns").transpose()

plt.figure(figsize=(10,8))
mean_text.plot(kind='bar')
plt.show()

!pip install yfinance

import yfinance as yf

start_date = '2021-07-13'
end_date = '2021-07-27'



data = pd.DataFrame()

# Fetch the data
for ticker in tickers:
    data[ticker] = yf.download(ticker, 
                               start_date,
                               end_date)['Adj Close']
    
# Print first 5 rows of the data
data.head(17)

gme = yf.Ticker('GME').history(start="2021-07-13",  end="2021-07-27")

gme.head()

gme = gme.drop(['Dividends','Stock Splits'],axis=1)

gme = gme.reset_index()

gme.columns = gme.columns.str.lower()

gme.head()

gme_sent = test[test['ticker'] == 'GME']

gme_sent.head()

gme_sent['date'] = gme_sent['date'].astype('datetime64')

gme_merge = gme_sent.merge(gme,on='date')

gme.dtypes

gme_sent.dtypes

gme_merge.head()

fig, ax1 = plt.subplots()
   
color = 'tab:blue'
ax1.set_xlabel('Date (s)')
ax1.set_ylabel('Close', color = color)
ax1.plot(gme_merge['date'], gme_merge['close'], color = color)
#ax1.tick_params(axis ='y', labelcolor = color)
ax1.tick_params(axis ='both', which='major', labelsize='8',labelcolor = color)

   
ax2 = ax1.twinx()
   
color = 'tab:green'
ax2.set_ylabel('Compound', color = color)
ax2.plot(gme_merge['date'], gme_merge['compound'], color = color)
#ax2.tick_params(axis ='y', labelcolor = color)
ax2.tick_params(axis ='both', which='major', labelsize='8',labelcolor = color)
  
fig.suptitle('GME Close vs Compound', fontweight ="bold")

plt.show()

amc = yf.Ticker('AMC').history(start="2021-07-13",  end="2021-07-27")
amc = amc.drop(['Dividends','Stock Splits'],axis=1)
amc = amc.reset_index()
amc.columns = amc.columns.str.lower()
amc_sent = test[test['ticker'] == 'AMC']
amc_sent['date'] = amc_sent['date'].astype('datetime64')
amc_merge = amc_sent.merge(gme,on='date')

fig, ax1 = plt.subplots()
   
color = 'tab:red'
ax1.set_xlabel('Date (s)')
ax1.set_ylabel('Close', color = color)
ax1.plot(amc_merge['date'], amc_merge['close'], color = color)
#ax1.tick_params(axis ='y', labelcolor = color)
ax1.tick_params(axis ='both', which='major', labelsize='8',labelcolor = color)

   
ax2 = ax1.twinx()
   
color = 'tab:purple'
ax2.set_ylabel('Compound', color = color)
ax2.plot(amc_merge['date'], amc_merge['compound'], color = color)
#ax2.tick_params(axis ='y', labelcolor = color)
ax2.tick_params(axis ='both', which='major', labelsize='8',labelcolor = color)
  
fig.suptitle('AMC Close vs Compound', fontweight ="bold")

plt.show()